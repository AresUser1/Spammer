# modules/Spammer/spam.py
"""
<manifest>
{
  "name": "Spammer",
  "version": "1.0.5",
  "author": "SynForge",
  "source": "https://raw.githubusercontent.com/AresUser1/Spammer/main/spam.py",
  "channel_url": "https://t.me/SynForge",
  "dependencies": []
}
</manifest>

–ú–æ–¥—É–ª—å –¥–ª—è —Å–ø–∞–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
–ê–≤—Ç–æ—Ä: @SynForge

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ spam <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–µ–∫—Å—Ç> - –ù–∞—á–∞—Ç—å —Å–ø–∞–º.
‚Ä¢ stopspam - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É —Å–ø–∞–º–∞.
"""

import asyncio
import re
from telethon.tl.types import MessageEntityBold, MessageEntityCode, MessageEntityCustomEmoji

from core import register
from utils.message_builder import build_and_edit, build_message

# --- –ü–†–ï–ú–ò–£–ú –≠–ú–û–î–ó–ò (–∑–∞–º–µ–Ω–∏—Ç–µ ID –Ω–∞ –≤–∞—à–∏) ---
ROCKET_EMOJI_ID = 5445284980978621387   # üöÄ
SUCCESS_EMOJI_ID = 5776375003280838798  # ‚úÖ
ERROR_EMOJI_ID = 5778527486270770928    # ‚ùå
INFO_EMOJI_ID = 5879785854284599288     # ‚ÑπÔ∏è

SPAM_TASK = None

@register("spam")
async def spam_cmd(event):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."""
    global SPAM_TASK

    if SPAM_TASK and not SPAM_TASK.done():
        return await build_and_edit(event, [
            {"text": "‚ùå", "entity": MessageEntityCustomEmoji, "kwargs": {"document_id": ERROR_EMOJI_ID}},
            {"text": " –°–ø–∞–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π .stopspam", "entity": MessageEntityBold}
        ])

    # --- –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ê–î–ï–ñ–ù–´–ô –ü–ê–†–°–ò–ù–ì –ê–†–ì–£–ú–ï–ù–¢–û–í –ò –ö–û–û–†–î–ò–ù–ê–¢ ---
    
    # –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "10 **–ü—Ä–∏–≤–µ—Ç**")
    args_text = event.pattern_match.group(1) or ""
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ event.text, –≥–¥–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
    args_start_offset = event.pattern_match.start(1)

    count = 20
    text_to_spam = ""
    text_start_offset = args_start_offset  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–∞–º –∂–µ, –≥–¥–µ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

    # –ò—â–µ–º —á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    match = re.match(r"(\d+)\s+", args_text)
    if match:
        count = int(match.group(1))
        # –¢–µ–∫—Å—Ç –¥–ª—è —Å–ø–∞–º–∞ - —ç—Ç–æ –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ —á–∏—Å–ª–∞ –∏ –ø—Ä–æ–±–µ–ª–∞
        text_to_spam = args_text[match.end():]
        # –°–¥–≤–∏–≥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Ç–µ–∫—Å—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è –¥–ª–∏–Ω—É —á–∏—Å–ª–∞ –∏ –ø—Ä–æ–±–µ–ª–∞
        text_start_offset += match.end()
    else:
        # –ï—Å–ª–∏ —á–∏—Å–ª–∞ –Ω–µ—Ç, –≤—Å—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ —Ç–µ–∫—Å—Ç
        text_to_spam = args_text

    if not text_to_spam:
        return await build_and_edit(event, [
            {"text": "‚ùå", "entity": MessageEntityCustomEmoji, "kwargs": {"document_id": ERROR_EMOJI_ID}},
            {"text": " –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∞–º–∞.", "entity": MessageEntityBold}
        ])

    entities = []
    if event.message.entities:
        for entity in event.message.entities:
            # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –Ω–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–ø–∞–º–∞
            if entity.offset >= text_start_offset:
                entity_dict = entity.to_dict()
                if '_' in entity_dict:
                    del entity_dict['_']
                new_entity = type(entity)(**entity_dict)
                # –°–º–µ—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Å—Ç–∏–ª—è –∫ –Ω–∞—á–∞–ª—É –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                new_entity.offset -= text_start_offset
                entities.append(new_entity)

    async def spam_worker():
        global SPAM_TASK
        try:
            tasks = [
                event.client.send_message(event.chat_id, text_to_spam, formatting_entities=entities)
                for _ in range(count)
            ]
            await asyncio.gather(*tasks)
        except asyncio.CancelledError:
            await event.client.send_message(event.chat_id, "**‚úÖ –°–ø–∞–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.**", parse_mode="md")
        except Exception as e:
            await event.client.send_message(event.chat_id, f"**‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–ø–∞–º–∞:**\n`{e}`", parse_mode="md")
        finally:
            SPAM_TASK = None
    
    SPAM_TASK = asyncio.create_task(spam_worker())
    await event.delete()
    
    confirm_parts = [
        {"text": "üöÄ", "entity": MessageEntityCustomEmoji, "kwargs": {"document_id": ROCKET_EMOJI_ID}},
        {"text": " –°–ø–∞–º –∑–∞–ø—É—â–µ–Ω! ", "entity": MessageEntityBold},
        {"text": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ", "entity": MessageEntityBold},
        {"text": str(count), "entity": MessageEntityCode}
    ]
    text, built_entities = build_message(confirm_parts)
    await event.client.send_message(event.chat_id, text, formatting_entities=built_entities)

@register("stopspam")
async def stopspam_cmd(event):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É —Å–ø–∞–º–∞."""
    global SPAM_TASK
    
    if not SPAM_TASK or SPAM_TASK.done():
        return await build_and_edit(event, [
            {"text": "‚ÑπÔ∏è", "entity": MessageEntityCustomEmoji, "kwargs": {"document_id": INFO_EMOJI_ID}},
            {"text": " –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å–ø–∞–º–∞ –Ω–µ—Ç.", "entity": MessageEntityBold}
        ])

    SPAM_TASK.cancel()
    await event.delete()