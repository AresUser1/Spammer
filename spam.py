# modules/spam.py
"""
<manifest>
{
  "name": "Spammer",
  "version": "1.0",
  "author": "SynForge",
  "source": "https://<—Å—Å—ã–ª–∫–∞_–Ω–∞_—Ç–≤–æ–π_github>/raw/main/modules/spam.py",
  "channel_url": "https://t.me/SynForge",
  "dependencies": []
}
</manifest>

–ú–æ–¥—É–ª—å –¥–ª—è —Å–ø–∞–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
–ê–≤—Ç–æ—Ä: @SynForge

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ spam <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–µ–∫—Å—Ç> - –ù–∞—á–∞—Ç—å —Å–ø–∞–º.
‚Ä¢ stopspam - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É —Å–ø–∞–º–∞.
"""

import asyncio
import re
from telethon.tl.types import MessageEntityBold, MessageEntityCode, MessageEntityCustomEmoji

from core import register
from utils.message_builder import build_and_edit, build_message

# --- –ü–†–ï–ú–ò–£–ú –≠–ú–û–î–ó–ò (–∑–∞–º–µ–Ω–∏—Ç–µ ID –Ω–∞ –≤–∞—à–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ .getid) ---
ROCKET_EMOJI_ID = 5445284980978621387   # –ü—Ä–∏–º–µ—Ä üöÄ
SUCCESS_EMOJI_ID = 5776375003280838798  # –ü—Ä–∏–º–µ—Ä ‚úÖ
ERROR_EMOJI_ID = 5778527486270770928    # –ü—Ä–∏–º–µ—Ä ‚ùå
INFO_EMOJI_ID = 5879785854284599288     # –ü—Ä–∏–º–µ—Ä ‚ÑπÔ∏è

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å–ø–∞–º–∞.
SPAM_TASK = None

@register("spam")
async def spam_cmd(event):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."""
    global SPAM_TASK

    if SPAM_TASK and not SPAM_TASK.done():
        return await build_and_edit(event, [
            {"text": "‚ùå", "entity": MessageEntityCustomEmoji, "kwargs": {"document_id": ERROR_EMOJI_ID}},
            {"text": " –°–ø–∞–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π .stopspam", "entity": MessageEntityBold}
        ])

    args_str = (event.pattern_match.group(1) or "").strip()
    
    count = 20
    text_to_spam = args_str

    match = re.match(r"(\d+)\s+(.*)", args_str, re.DOTALL)
    if match:
        count = int(match.group(1))
        text_to_spam = match.group(2)
    
    if not text_to_spam:
        return await build_and_edit(event, [
            {"text": "‚ùå", "entity": MessageEntityCustomEmoji, "kwargs": {"document_id": ERROR_EMOJI_ID}},
            {"text": " –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∞–º–∞.", "entity": MessageEntityBold}
        ])

    command_prefix_len = len(event.text.split(text_to_spam, 1)[0])
    entities = []
    if event.message.entities:
        for entity in event.message.entities:
            if entity.offset >= command_prefix_len:
                new_entity = entity.copy()
                new_entity.offset -= command_prefix_len
                entities.append(new_entity)
    
    async def spam_worker():
        global SPAM_TASK
        try:
            tasks = [
                event.client.send_message(event.chat_id, text_to_spam, formatting_entities=entities)
                for _ in range(count)
            ]
            await asyncio.gather(*tasks)
        except asyncio.CancelledError:
            await event.client.send_message(
                event.chat_id, 
                "**‚úÖ –°–ø–∞–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.**", 
                parse_mode="md"
            )
        except Exception as e:
            await event.client.send_message(
                event.chat_id,
                f"**‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–ø–∞–º–∞:**\n`{e}`",
                parse_mode="md"
            )
        finally:
            SPAM_TASK = None
    
    SPAM_TASK = asyncio.create_task(spam_worker())
    
    await event.delete()
    
    confirm_parts = [
        {"text": "üöÄ", "entity": MessageEntityCustomEmoji, "kwargs": {"document_id": ROCKET_EMOJI_ID}},
        {"text": " –°–ø–∞–º –∑–∞–ø—É—â–µ–Ω! ", "entity": MessageEntityBold},
        {"text": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ", "entity": MessageEntityBold},
        {"text": str(count), "entity": MessageEntityCode}
    ]
    text, entities = build_message(confirm_parts)
    await event.client.send_message(event.chat_id, text, formatting_entities=entities)


@register("stopspam")
async def stopspam_cmd(event):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É —Å–ø–∞–º–∞."""
    global SPAM_TASK
    
    if not SPAM_TASK or SPAM_TASK.done():
        return await build_and_edit(event, [
            {"text": "‚ÑπÔ∏è", "entity": MessageEntityCustomEmoji, "kwargs": {"document_id": INFO_EMOJI_ID}},
            {"text": " –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å–ø–∞–º–∞ –Ω–µ—Ç.", "entity": MessageEntityBold}
        ])

    SPAM_TASK.cancel()
    await event.delete()